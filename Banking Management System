#include<iostream>
#include<iomanip>
#include<fstream>
#include<cctype>
#include<stdlib.h>

using namespace std;

class Bank_Account{
     int account_number;
     char Name[50];
     char type;
     int Money_Deposit;

     public:
     void modify();
     void report() const;
     int retacno()const{
        return account_number;
     }
     void dep(int x){   
        Money_Deposit += x;
     }
     void draw(int x){
        Money_Deposit -= x;
     }
     int retdeposit() const{
        return Money_Deposit;
     }

     void create_account();
     void display_account();
};
void Bank_Account::report() const{
    cout<<account_number<<setw(10)<<" "<<type<<setw(6)<<Money_Deposit<<endl;

}
void Bank_Account::modify(){
    cout<<"\t Account number: "<<account_number<<endl;
    cin.ignore();
    cin.getline(Name,50);
    cout<<"\t modify type of Account: ";
    cin>>type;
    type=toupper(type);
    cout<<"\t Modify Balance Amount: ";
    cin>>Money_Deposit; 
}

void Bank_Account::create_account(){
    system("clear");
    cout<<"\tEnter the account number :";
    cin>>account_number;
    cout<<"\t Enter the name of Account holder:";
    cin.ignore();
    cin.getline(Name,50);
    cout<<"\tEnter the type of account (c/s):";
    cin>>type;
    type=toupper(type);
    cout<<"\t Enter the initial amount(>=500 for saving and >=1000 for curent):";
    cin>> Money_Deposit;
    cout<<"\t Acccount created:";
    cout<<endl;

}
void write_account();
void display_details(int);
void delete_account(int);
void display_all();
void money_deposit_withdraw(int,int);
void updation_bank_account(int);

void Bank_Account::display_account(){
    cout<<"\t Bank Account Number:"<<account_number<<endl;
    cout<<"Account Holder Name:"<<Name<<endl;
    cout<<"\t Balance Amount:"<<Money_Deposit<<endl;
}

int main(){
    char ch;
    int num;

    do{
    cout<<"\t\t------------------------------------------"<<endl;
    cout<<"\t\t | Welcome to the Bank Management System |"<<endl;
    cout<<"\t\t-----------------------------------------"<<endl;
    cout<<endl;
    cout<<"\t---Main Menu---"<<endl;
    cout<<"\t 1.Create Account"<<endl;
    cout<<"\t 2.Deposit Money"<<endl; 
    cout<<"\t 3.Withdraw Money"<<endl;
    cout<<"\t 4.Balance Enquiry"<<endl;
    cout<<"\t 5.All Account Holder List"<<endl;
    cout<<"\t 6.Close An Account"<<endl;
    cout<<"\t 7.Modify an Account"<<endl;
    cout<<"\t 8.Exit"<<endl;

    cout<<"\t Enter your choice (1-8):";
    cin>>ch;

     switch(ch){
        case '1':
        cout<<"Enter the account number: ";
            cin>>num;
            write_account();

            break;
        case '2':
        system("clear");
            cout<<"Enter the account number: ";
            cin>>num;
            money_deposit_withdraw(num,1);
            

            break;
        case '3':
        system("clear");
         cout<<"Enter the account number: ";
            cin>>num;
            

            break;
        case '4':
               system("clear");
         cout<<"Enter the account number: ";
            cin>>num;

            display_details(num);
            

            break;
        case '5':
             display_all();

            break;
        case '6':
        system("clear");
        cout<<"\t Enter the account number: ";
        cin>>num;
        delete_account(num);
 
            break;
        case '7':
           system("clear");
         cout<<"Enter the account number: ";
            cin>>num;
            updation_bank_account(num);
            // modify account function

            break;
        case '8':

            cout<<"Thanks for using bank management system"<<endl;

            break;
     }
     cin.ignore();
     cin.get();
      
        }while(ch!=8);
        return 0; 


    // Bank_Account B;
    // B.create_account();
    // B.Display_Account();
    // return 0;
}
void write_account()//function to write recor in binary file
{
    Bank_Account ac;
    ofstream outfile;
    outfile.open("account.dac",ios::binary|ios::app);
    ac.create_account();
    outfile.write(reinterpret_cast<char*>(&ac),sizeof(Bank_Account));
    outfile.close();

}
void delete_account(int n){
    Bank_Account ac;
    ifstream infile;//input file stream
    ofstream outfile;//output file stream
    infile.open("accoun.dat",ios::binary);
        if(infile){
            cout<<"file could not be open || press any key...";
            return;
        }
        outfile.open("Temp.dat",ios::binary);
        infile.seekg(0,ios::beg);
        while(infile.read(reinterpret_cast<char*>(&ac),sizeof(Bank_Account))){
            if(ac.retacno()!=n){
                outfile.write(reinterpret_cast<char*>(&ac),sizeof(Bank_Account));
                infile.seekg(0,ios::beg);

                while(infile.read(reinterpret_cast<char*>(&ac),sizeof(Bank_Account))){
                    if(ac.retacno()!=n){
                        outfile.write(reinterpret_cast<char*> (&ac),sizeof(Bank_Account));

                    }
                }
                infile.close();
                outfile.close();
                remove("Temp.dat,Bank_account.dat");
            }
        }
        }
     
void display_details(int n){
    Bank_Account ac;
    bool flag = false;
    ifstream inFile;
    inFile.open("account.dat",ios::binary);
    if(inFile){
        cout<<"file could not be open || press any key...";
        return;
    }
    cout<<"\t Bank Account details"<<endl;
    while(inFile.read(reinterpret_cast<char*>(&ac),sizeof(Bank_Account))){
        if(ac.retacno()==n){
            ac.display_account();
            flag=true;
        }
    }
    inFile.close();
    if(flag==false){
        cout<<"\t account number does not exist";
    };
}    
void display_all(){
    system("cls");
    Bank_Account ac;
    ifstream inFile;
    inFile.open("account.dat",ios::binary);
    if(inFile){
        cout<<"File is not be open || Press any key..";
        return;
    }
    cout<<"\t bank account holders list"<<endl;
    cout<<"===================================="<<endl;
    cout<<"a/c no.       Name    Type   Balance"<<endl;
    cout<<"===================================="<<endl;

    while(inFile.read(reinterpret_cast<char*>(&ac),sizeof(Bank_Account)))
    {
        ac.report();
    }
    inFile.close();
}

void money_deposit_withdraw(int n ,int option){

    int amt;
    bool found = false;
    Bank_Account ac;
    fstream File;
    File.open("account.dat",ios::binary|ios::in|ios::out);
    if(!File){
        cout<<"file could not be open || press any key..";
        return;
    }
    while(!File.eof() && found == false){
        File.read(reinterpret_cast<char *> (&ac),sizeof(Bank_Account));
        if(ac.retacno()==n){
            ac.display_account();
            if(option ==1){
                cout<<"Enter the amount to be deposited";
                cin>>amt;
                ac.dep(amt);
            }
            if(option ==2){
                cout<<"\t Enter the amount to be withdrawn:";
                cin>>amt;
                int balance =ac.retdeposit() -amt;
                if(balance< 0){
                    cout<<"\t Insuffucuent Balance "<<endl;
                }
                else{
                        ac.draw(amt);
                }
            }
            int pos= (-1)*static_cast<int>(sizeof(Bank_Account));
            File.seekp(pos,ios::cur);//move the pointer to the position of the file
            File.write(reinterpret_cast<char*> (&ac), sizeof(Bank_Account));//write the record in the file
            cout<<"\t Record Updated"<<endl;
       }
    }
    if(found == false){
        cout<<"\t Record not found ";
    }
}

void updation_bank_account(int n){
    bool found = false;
    Bank_Account ac;
    fstream File;
    File.open("account.dat",ios::binary|ios::in|ios::out); //open the file in binary mode
    if(!File){
        cout<<"File could not be open || Press any key...";
        return;
    }
    while(File.eof() && found== false){
        File.read(reinterpret_cast<char*> (&ac),sizeof(Bank_Account));//read the record from the file
        if(ac.retacno()==n){
            ac.display_account();
            cout<<"\t Enter the new details of the account"<<endl;
            ac.modify();
            int pos = (-1)*static_cast<int>(sizeof(Bank_Account)); //move the pointer of the file
            File.seekp(pos,ios::cur); //move the pointer to the position of the file
            File.write(reinterpret_cast<char*> (&ac),sizeof(Bank_Account)); //write the record in the file
            cout<<"\t Record not found"<<endl;
            found=true;

        }
    }
    File.close();
    if(found == false){
        cout<<"Record not found"<<endl;
    }
}
